


    import math

import numpy as np
def brutForce(matrixEquality, matrixLess, matrixMore, xLimits, targetFunc, leftLimit, rightLimit, isMin):
    vector = [leftLimit] * len(targetFunc)

    if isMin:
        answerResult = math.inf
    else:
        answerResult = -math.inf
    answerVector = vector

    while(vector[0] <= rightLimit):
        for i in range(0, len(vector) - 1):
            if vector[len(vector) - i - 1] > rightLimit:
                vector[len(vector) - i - 2] = vector[len(vector) - i - 2] + 1
                vector[len(vector) - i - 1] = leftLimit

        if vector[-1] <= rightLimit and vector[0] <= rightLimit:
            limitsFlag = True

            for i in range(0, len(xLimits)):
                if xLimits[i] == 1:
                    if vector[i] < 0:
                        limitsFlag = False
                elif xLimits == -1:
                    if vector[i] > 0:
                        limitsFlag = False

            for i in range(0, len(matrixEquality)):
                tempResult = 0
                for j in range(0, len(matrixEquality[i]) - 1):
                    tempResult += (matrixEquality[i][j] * vector[j])
                if (tempResult != matrixEquality[i][-1]):
                    limitsFlag = False

            for i in range(0, len(matrixLess)):
                tempResult = 0
                for j in range(0, len(matrixLess[i]) - 1):
                    tempResult += (matrixLess[i][j] * vector[j])
                if (tempResult > matrixLess[i][-1]):
                    limitsFlag = False

            for i in range(0, len(matrixMore)):
                tempResult = 0
                for j in range(0, len(matrixMore[i]) - 1):
                    tempResult += (matrixMore[i][j] * vector[j])
                if (tempResult < matrixMore[i][-1]):
                    limitsFlag = False

            if limitsFlag:
                tempResult = 0
                for i in range(0, len(targetFunc)):
                    tempResult += (targetFunc[i]*vector[i])
                if isMin:
                    if answerResult > tempResult:
                        answerResult = tempResult
                        answerVector = vector.copy()
                else:
                    if answerResult < tempResult:
                        answerResult = tempResult
                        answerVector = vector.copy()
        vector[-1] = vector[-1] + 1
    print(answerResult, answerVector)

# ==
A = np.array([[0, -2, 0, 1, 1, -3],
              [0, 0, 1, -2, 0, 2],
              [0, 0, 3, 0, 10, 12]])

#>=
B = np.array([[1, 0, 1, 0, 0, -3],
             [0, 2, 0, 2, 0, 6]])

#<=
C = np.array([[1, 3, 0, -1, 0, 5]])

F = np.array([-2, 1, -1, 0, 1])

# 0 - not, 1 -> xi > 0, -1 -> xi < 0
xLimits = [1, 1, 1, 0, 0]

if __name__ == '__main__':
    brutForce(A, C, B, xLimits, F, 0, 5, True)